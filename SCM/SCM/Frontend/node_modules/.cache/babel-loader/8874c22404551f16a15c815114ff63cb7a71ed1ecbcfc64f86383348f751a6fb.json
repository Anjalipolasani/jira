{"ast":null,"code":"var _jsxFileName = \"/Users/karthikbalaji/Documents/Anjali/SCM/Frontend/src/DefectAnalytics.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Importing axios, a promise-based HTTP client for making requests to our backend.\n\n// DefectAnalytics component is responsible for displaying analytics about the defects.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DefectAnalytics = () => {\n  _s();\n  // State variables for storing the defects and the count of 'Closed' and 'In Progress' defects.\n  const [defects, setDefects] = useState([]);\n  const [closedCount, setClosedCount] = useState(0);\n  const [inProgressCount, setInProgressCount] = useState(0);\n  const [openCount, setOpenCount] = useState(0);\n\n  // Asynchronous function to fetch defects from the server.\n  const fetchDefects = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/SCM'); // Making GET request to fetch all defects.\n      setDefects(response.data); // Storing the fetched defects in state.\n    } catch (error) {\n      console.error('Failed to fetch defects:', error); // Logging an error message if the request fails.\n    }\n  };\n\n  // useEffect hook to fetch defects when the component mounts.\n  useEffect(() => {\n    fetchDefects(); // Fetching defects from the server.\n  }, []); // Empty dependency array means this useEffect runs once when component is mounted.\n\n  // useEffect hook to calculate and set the counts of 'Closed' and 'In Progress' defects whenever the 'defects' state changes.\n  useEffect(() => {\n    const closed = defects.filter(defect => defect.status === 'Closed').length; // Calculating 'Closed' defects.\n    const inProgress = defects.filter(defect => defect.status === 'In Progress').length; // Calculating 'In Progress' defects.\n    const open = defects.filter(defect => defect.status === 'Open').length; // Calculating 'Open' defects.\n\n    setClosedCount(closed); // Setting the count of 'Closed' defects.\n    setInProgressCount(inProgress); // Setting the count of 'In Progress' defects.\n    setOpenCount(open); // Setting the count of 'Open' defects.\n  }, [defects]); // This useEffect runs whenever the 'defects' state changes.\n\n  // Rendering the analytics.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Defect Analytics\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total \\\"Closed\\\" Defects: \", closedCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total \\\"In Progress\\\" Defects: \", inProgressCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Total \\\"Open\\\" Defects: \", openCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n};\n_s(DefectAnalytics, \"WFzG24jW9WJ4E0cOWzFA7xw8KCc=\");\n_c = DefectAnalytics;\nexport default DefectAnalytics; // Exporting the component for use in other parts of your application.\nvar _c;\n$RefreshReg$(_c, \"DefectAnalytics\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","DefectAnalytics","_s","defects","setDefects","closedCount","setClosedCount","inProgressCount","setInProgressCount","openCount","setOpenCount","fetchDefects","response","get","data","error","console","closed","filter","defect","status","length","inProgress","open","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/karthikbalaji/Documents/Anjali/SCM/Frontend/src/DefectAnalytics.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios'; // Importing axios, a promise-based HTTP client for making requests to our backend.\n\n// DefectAnalytics component is responsible for displaying analytics about the defects.\nconst DefectAnalytics = () => {\n  // State variables for storing the defects and the count of 'Closed' and 'In Progress' defects.\n  const [defects, setDefects] = useState([]);\n  const [closedCount, setClosedCount] = useState(0);\n  const [inProgressCount, setInProgressCount] = useState(0);\n  const [openCount, setOpenCount] = useState(0);\n\n  // Asynchronous function to fetch defects from the server.\n  const fetchDefects = async () => {\n    try {\n      const response = await axios.get('http://localhost:8080/SCM'); // Making GET request to fetch all defects.\n      setDefects(response.data); // Storing the fetched defects in state.\n    } catch (error) {\n      console.error('Failed to fetch defects:', error); // Logging an error message if the request fails.\n    }\n  };\n\n  // useEffect hook to fetch defects when the component mounts.\n  useEffect(() => {\n    fetchDefects(); // Fetching defects from the server.\n  }, []); // Empty dependency array means this useEffect runs once when component is mounted.\n\n  // useEffect hook to calculate and set the counts of 'Closed' and 'In Progress' defects whenever the 'defects' state changes.\n  useEffect(() => {\n    const closed = defects.filter(defect => defect.status === 'Closed').length; // Calculating 'Closed' defects.\n    const inProgress = defects.filter(defect => defect.status === 'In Progress').length; // Calculating 'In Progress' defects.\n    const open = defects.filter(defect => defect.status === 'Open').length; // Calculating 'Open' defects.\n\n    setClosedCount(closed); // Setting the count of 'Closed' defects.\n    setInProgressCount(inProgress); // Setting the count of 'In Progress' defects.\n    setOpenCount(open); // Setting the count of 'Open' defects.\n  }, [defects]); // This useEffect runs whenever the 'defects' state changes.\n\n  // Rendering the analytics.\n  return (\n    <div>\n      <h2>Defect Analytics</h2> \n      <p>Total \"Closed\" Defects: {closedCount}</p> \n      <p>Total \"In Progress\" Defects: {inProgressCount}</p> \n      <p>Total \"Open\" Defects: {openCount}</p> \n    </div>\n  );\n};\n\nexport default DefectAnalytics; // Exporting the component for use in other parts of your application.\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO,CAAC,CAAC;;AAE3B;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,WAAW,EAAEC,cAAc,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACW,eAAe,EAAEC,kBAAkB,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACzD,MAAM,CAACa,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;;EAE7C;EACA,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,KAAK,CAACe,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;MAC/DT,UAAU,CAACQ,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;IAC7B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC,CAAC,CAAC;IACpD;EACF,CAAC;;EAED;EACAlB,SAAS,CAAC,MAAM;IACdc,YAAY,CAAC,CAAC,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER;EACAd,SAAS,CAAC,MAAM;IACd,MAAMoB,MAAM,GAAGd,OAAO,CAACe,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,QAAQ,CAAC,CAACC,MAAM,CAAC,CAAC;IAC5E,MAAMC,UAAU,GAAGnB,OAAO,CAACe,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,aAAa,CAAC,CAACC,MAAM,CAAC,CAAC;IACrF,MAAME,IAAI,GAAGpB,OAAO,CAACe,MAAM,CAACC,MAAM,IAAIA,MAAM,CAACC,MAAM,KAAK,MAAM,CAAC,CAACC,MAAM,CAAC,CAAC;;IAExEf,cAAc,CAACW,MAAM,CAAC,CAAC,CAAC;IACxBT,kBAAkB,CAACc,UAAU,CAAC,CAAC,CAAC;IAChCZ,YAAY,CAACa,IAAI,CAAC,CAAC,CAAC;EACtB,CAAC,EAAE,CAACpB,OAAO,CAAC,CAAC,CAAC,CAAC;;EAEf;EACA,oBACEH,OAAA;IAAAwB,QAAA,gBACExB,OAAA;MAAAwB,QAAA,EAAI;IAAgB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACzB5B,OAAA;MAAAwB,QAAA,GAAG,4BAAwB,EAACnB,WAAW;IAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5C5B,OAAA;MAAAwB,QAAA,GAAG,iCAA6B,EAACjB,eAAe;IAAA;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrD5B,OAAA;MAAAwB,QAAA,GAAG,0BAAsB,EAACf,SAAS;IAAA;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACrC,CAAC;AAEV,CAAC;AAAC1B,EAAA,CA1CID,eAAe;AAAA4B,EAAA,GAAf5B,eAAe;AA4CrB,eAAeA,eAAe,CAAC,CAAC;AAAA,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}